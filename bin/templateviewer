#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long qw(GetOptionsFromArray :config gnu_getopt auto_version);
use Pod::Usage;
use Path::Class;
use Cwd;
use Carp;
use Data::Dumper;

use App::TemplateViewer;

use Plack::Builder;
use Plack::Runner;
use version 0.77; our $VERSION = qv("v0.1.0");

# main
if ( $ENV{DEBUG} ) {
    $Carp::Verbose = 1;
}

my @plackup_args = (); #TODO : ugry
my $args = parse_args(@ARGV) or exit 0;

if ( $args->{init} ) {
    App::TemplateViewer->init;
    exit 0;
}
elsif ( $args->{sync} ) {
    App::TemplateViewer::FileWatcher->new( watch => [ $args->{target} ] )->run;
}


# setup plack app
my $app = App::TemplateViewer->run($args);
{
    if ( exists $args->{static} ) {
        $app = build_static_path( $app, $args->{static} );
    }
    if ( exists $args->{builder} ) {
        $app = builder {
            do $args->{builder};
            $app;
        }
    }
}

my $runner = Plack::Runner->new;
$runner->parse_options(@plackup_args);
$runner->run($app);

# subroutine

sub build_static_path {
    my ( $app, $h ) = @_;
    while ( my ( $k, $v ) = each %$h ) {
        $app = Plack::Middleware::Static->wrap( $app, path => qr($k), root => $v );
    }
    $app;
}

sub parse_args {
    my @args = @_;
    my @args_pattern
        = ( 'help|h', 'format|f=s', 'builder|b=s', 'config|c=s', 'data|d=s', 'target|t=s', 'port|p=i', 'static|s=s%', 'w=s', 'init', 'sync!' );
    my %h = (
        format => 'tt2',
        sync   => 1,
    );
    if ( not GetOptionsFromArray( \@args, \%h, @args_pattern ) ) { pod2usage(2); return; }
    if ( exists $h{help} ) { pod2usage(1); return; }

    # load config
    my %cfg = ();
    if ( exists $h{config} ) {
        _is_file($h{config}) or return;
        %cfg = %{do delete $h{config}};
    }

    # set default for template variables
    {
        exists $cfg{tv} or $cfg{tv} = {};
        map{$cfg{tv}{$_} ||= +{} } App::TemplateViewer->supported_format;
    }

    # overwrite config by cui args
    while (my ($k, $v) = each %h) {
        $cfg{$k} = $v;
    }

    _check_options(\%cfg) or return;
    _write_config(\%cfg) if exists $cfg{w};
    _preprocess_options(\%cfg);

    # set plackup_args
    if ( @args > 0 ) {
        @plackup_args = @args;
    }
    foreach my $k (qw(port)) {
        if ( exists $cfg{$k} ) {
            push @plackup_args, "--$k", delete $cfg{$k};
        }
    }

    return \%cfg;
}

sub _check_options {
    my ($opts) = @_;
    if ( not App::TemplateViewer->is_supported_format( $opts->{format} ) ) {
        printf STDERR "%s is not supported\n", $opts->{format};
        printf STDERR "supported type : %s\n", join q{ }, App::TemplateViewer->supported_format;
        return;
    }
    foreach my $k (qw(target) ) {
        if ( exists $opts->{$k} ) { _is_dir($opts->{$k}) or return; }
    }
    foreach my $k (qw(builder config) ) {
        if ( exists $opts->{$k} ) { _is_file($opts->{$k}) or return; }
    }

    if ( exists $opts->{static} and 'HASH' eq ref $opts->{static} ) {
        while ( my ( $k, $v ) = each %{ $opts->{static} } ) {
            if ( q{/template_viewer_static/} =~ m{$k} ){
                print STDERR "\nstatic option: '$k=$v' will match '/template_viewer_static/'. recommend write regular expression more correctly\n";
            }
            _is_dir($v) or return;
        }
    }
    return 1;
}

sub _preprocess_options {
    my ($opts) = @_;

    # set default value
    $opts->{target} ||= getcwd();
    $opts->{data}   ||= '/tmp/templateviewer'; # TODO temp
}

# output config file
sub _write_config {
    my ($opts) = @_;
    my $file = delete $opts->{w};
    print STDERR "\nconfig : $file is written\n";
    $Data::Dumper::Terse = 1;
    open my $fh, '>', $file or die $!;
    print $fh '+' . Dumper $opts;
    close $fh;
}


sub _is_dir {
    my $path = shift;
    if ( not -d $path ) {
        print STDERR "$path is not directory";
        return;
    }
    return 1;
}

sub _is_file {
    my $path = shift;
    if ( not -f $path ) {
        print STDERR "$path is not found";
        return;
    }
    return 1;
}

__END__

=pod

=head1 NAME

templateviewer - template viewer

=head1 SYNOPSIS

  templateviewer [options] [ -- [plackup options] ]

=head1 DESCRIPTION

templateviewer is template viewer

=head1 OPTIONS

=over 8

=item B<--target|-t> /path/to/target

set target directory. ( default: current directory )

=item B<--data|-d> /path/to/data/dir

set data directory. ( default: /tmp/templateviewer/ )

=item B<--format|-f> format

set default format type. ( default: tt2 )

=item B<--[no]sync> 

sync on/off switch.
if sync is on (default), on updating target file, auto-update textarea and preview.

=item B<--port|p> port_number

this option is passed to plackup

=item B<--static|s> path_info=path_to_file [--static path_info2=path_to_file2

this option can set multiple args.
this option path to Plack::Middleware::Static like

  Plack::Middleware::Static->wrap($app, path => qr(path_info), root => 'path_to_file');

=item B<--config|c> config_file

config file for template viewer. At first, recommend to use 'w' option.
config format like bellow.

    +{
        [option_name] => value

        tv => {
            [template format] => {

            },
        },
    }

tv hash ref is handed to template constructor as array (like %{$h->{type}})

=item B<-w> config_output_file

output config file from command line option.

=item B<--builer|b> builder_file
 
builder file for set static file url. this file will do in builder block.

    #!perl
    use Plack::Builder;
    use File::Basename;
    use File::Spec;
    enable "Plack::Middleware::Static",
      path => qr{^/images|js|css|static/}, root => File::Spec->catfile(dirname(__FILE__), 'htdocs');

=item B<--help|-h>

show help

=item B<--version>

show version

=item B<--> plack options

you can pass options after B<--> to plackup

=back

=head1 AUTHOR

ywatase E<lt>ywatase@gmail.comE<gt>

=head1 SEE ALSO

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

# vim: set ft=perl:
